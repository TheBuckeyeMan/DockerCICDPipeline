#Ensure your repository Secrets for DOCKER_USERNAME, DOCKER_PASSWORD, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY are properly configured
name: CI/CD Pipeline

on:
  push:
    branches: #Add additional branches if we neeed to add additional branches
      - main 
      - dev
      - test
      - feature/dockerimagecreation
      - feature/cd

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 

    steps:
#Run a series of tests on the application
      - name: Set up Maven Wrapper
        run: chmod +x ./mvnw
      - name: Jacoco - Generate Test Coverage Report
        run: |
          ./mvnw test
          ./mvnw jacoco:report

      - name: Run Unit Tests
        run: ./mvnw test

      - name: SonarQube - Run Static Code Analysis
        run: ./mvnw sonar:sonar
        




      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t thebuckeyeman20/cicd:image1 .

      - name: Push Docker images
        run: |
          docker push thebuckeyeman20/cicd:image1

#Teraform code for the terraform infrastructure deployment - this is what kicks off the deployment of aws resources
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform #Adjust if we have our terraform file in a different directory

      - name: Terraform Plan
        run: terraform plan -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        working-directory: terraform #Adjust if we have our terraform file in a different directory

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        working-directory: terraform # Adjust if your Terraform configuration is in a different directory

      # - name: Terraform Destroy #Remove the terraform destroy to use this pipeline in a fully functioning application
      #   run: terraform destroy -auto-approve -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #   working-directory: terraform # Adjust if your Terraform configuration is in a different directory

# CD Portion of the cicd process - take docker image and push to aws lambda
      # - name: Trigger Spinnaker Pipeline
      #   run: |
      #     curl -X POST https://spinnaker-api-endpoint/trigger-pipeline \
      #     -H "Content-Type: application/json" \
      #     -H "Authorization: Bearer ${{ secrets.SPINNAKER_API_TOKEN }}" \
      #     -d '{"application": "your-app-name", "pipeline": "your-pipeline-name"}'
      #   env:
      #     SPINNAKER_API_TOKEN: ${{ secrets.SPINNAKER_API_TOKEN }}


          

